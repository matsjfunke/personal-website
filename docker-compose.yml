version: "3.8"

services:
  traefik:
    image: traefik:v3.0
    container_name: traefik
    command:
      - "--api.insecure=false" # Disable insecure API dashboard for production security
      - "--providers.docker=true" # Auto-discover services via Docker labels
      # Only expose services that explicitly set traefik.enable=true (security best practice)
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80" # HTTP entypoint redirects to HTTPS
      - "--entrypoints.websecure.address=:443" # HTTPS entypoint
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true" # Automatic SSL certificate generation via Let's Encrypt TLS challenge
      - "--certificatesresolvers.myresolver.acme.email=mats.funke@gmail.com" # Email required for Let's Encrypt certificate notifications and recovery
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json" # SSL certificates persist across container restarts
      # Force HTTP to HTTPS redirect for security (all traffic must be encrypted)
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt # SSL certificates persist across container restarts
    networks:
      - web
    restart: unless-stopped

  personal-website:
    build: .
    container_name: personal-website
    labels:
      - "traefik.enable=true"

      # Define service first to avoid Traefik auto-generating conflicting services
      # Both routers will reference this single service definition
      - "traefik.http.services.personal-website.loadbalancer.server.port=3000"

      # Main website route - serves the primary domain
      - "traefik.http.routers.personal-website.rule=Host(`matsjfunke.com`)"
      - "traefik.http.routers.personal-website.entrypoints=websecure"
      - "traefik.http.routers.personal-website.tls.certresolver=myresolver"
      # Explicitly link to service to prevent Traefik confusion with multiple routers
      - "traefik.http.routers.personal-website.service=personal-website"

      # MCP server route - dedicated subdomain for API access
      - "traefik.http.routers.mcp.rule=Host(`mcp.matsjfunke.com`) && PathPrefix(`/mcp`)"
      - "traefik.http.routers.mcp.entrypoints=websecure"
      - "traefik.http.routers.mcp.tls.certresolver=myresolver"
      # Both routers point to same service since it's the same Next.js container
      - "traefik.http.routers.mcp.service=personal-website"

      # Transform /mcp to /api/mcp for Next.js routing
      - "traefik.http.middlewares.mcp-stripprefix.stripprefix.prefixes=/mcp"
      - "traefik.http.middlewares.mcp-addprefix.addprefix.prefix=/api/mcp"

      # CORS headers required for MCP protocol compatibility with AI clients
      - "traefik.http.middlewares.mcp-cors.headers.accesscontrolallowmethods=GET,POST,OPTIONS,DELETE"
      - "traefik.http.middlewares.mcp-cors.headers.accesscontrolallowheaders=Content-Type,Authorization,mcp-session-id"
      - "traefik.http.middlewares.mcp-cors.headers.accesscontrolalloworiginlist=*"

      # Chain middlewares: strip /mcp, add /api/mcp, then CORS
      - "traefik.http.routers.mcp.middlewares=mcp-stripprefix,mcp-addprefix,mcp-cors"

    networks:
      - web
    restart: unless-stopped
    depends_on:
      - traefik

volumes:
  # Named volume for Let's Encrypt certificates persistence across container restarts
  traefik_letsencrypt:

networks:
  # Internal network for container communication (external=false for security)
  web:
    external: false
